var nc = require('ncurses'), widgets = require('./ncurses/widgets'), EventEmitter = require('events').EventEmitter, prompt = require('prompt');

var NcursesProvider = (function () {
    function NcursesProvider() {
        this.questions = [];
        this.questioning = false;
        this.win = null;
    }
    NcursesProvider.prototype.addContext = function (node, defaultContext) {
        this.win = new nc.Window(nc.lines, nc.cols);

        //nc.showCursor = false;
        node.inputTimeout = 120000;

        if (typeof defaultContext !== "undefined") {
            var question = this.askForContext(node, defaultContext);

            if (!this.questioning) {
                question(node, defaultContext);
            } else {
                this.questions.push(question);
            }
        }
    };

    NcursesProvider.prototype.askForContext = function (node, defaultContext) {
        var self = this;

        return function () {
            self.questioning = true;

            // title = "Chi".cyan.bold + "Ï‡".zebra + ":".green + node.name;
            var name = Object.keys(defaultContext);

            widgets.InputBox('Enter ' + defaultContext[name] + ':', {
                pos: 'center',
                style: {
                    colors: {
                        bg: 'blue',
                        input: {
                            fg: 'red',
                            bg: 'black'
                        }
                    }
                }
            }, function (input) {
                if (!input)
                    input = '';

                self.win.centertext(0, 'You entered: ' + input);

                if (typeof defaultContext[name] === "object") {
                    input = JSON.parse(input);
                }

                node.addContextProperty(name, input);

                self.win.refresh();

                setTimeout(function () {
                    self.win.close();

                    if (self.questions.length) {
                        var question = self.questions.pop();
                        question();
                    } else {
                        self.questioning = true;
                    }
                }, 1000);
            });
        };
    };
    return NcursesProvider;
})();

NcursesProvider.prototype.__proto__ = EventEmitter.prototype;

module.exports = NcursesProvider;
